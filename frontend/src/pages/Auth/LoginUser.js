import { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import "../../assets/styles/LoginUser.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEye, faEyeSlash } from "@fortawesome/free-solid-svg-icons";
import bg from '../../assets/images/shipper_icon.jpg';
import axios from 'axios';

export default function LoginUser() {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [showPassword, setShowPassword] = useState(false); // Tr·∫°ng th√°i hi·ªÉn th·ªã m·∫≠t kh·∫©u
    const [errors, setErrors] = useState({});
    const [loginError, setLoginError] = useState("");
    const [greeting, setGreeting] = useState("");
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();

    useEffect(() => {
        const getGreeting = () => {
            const hour = new Date().getHours();
            if (hour >= 6 && hour < 11) {
                return "Ch√†o ng√†y m·ªõi! C√πng ch·ªët nhi·ªÅu ƒë∆°n h√¥m nay nh√©.";
            } else if (hour >= 19 && hour <= 23) {
                return "Bu·ªïi t·ªëi an l√†nh b√™n gia ƒë√¨nh b·∫°n nh√©! G√°c c√¥ng vi·ªác l·∫°i n√†o.";
            } else {
                return "Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!";
            }
        };
        setGreeting(getGreeting());
    }, []);

    const handleLogin = async () => {
        let newErrors = {};
        setLoginError("");
        setLoading(true);  // **B·∫≠t tr·∫°ng th√°i loading**
    
        if (!username.trim()) newErrors.username = "Vui l√≤ng nh·∫≠p t√†i kho·∫£n";
        if (!password.trim()) newErrors.password = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
    
        setErrors(newErrors);
    
        if (Object.keys(newErrors).length === 0) {
            try {
                const response = await axios.post("http://localhost:5000/api/users/login", {
                    username,
                    password,
                });
    
                if (response.status === 200) {
                    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
                    alert("üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
    
                    // **L∆∞u Token v√†o localStorage**
                    localStorage.setItem("authToken", response.data.token);
    
                    // **Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang Home**
                    navigate("/home");
                }
            } catch (error) {
                console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error.response);
    
                // **X·ª≠ l√Ω l·ªói t·ª´ server**
                if (error.response?.status === 400) {
                    // Ki·ªÉm tra n·∫øu t√†i kho·∫£n ƒë√£ b·ªã x√≥a ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a
                    if (error.response?.data?.message === "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a.") {
                        setLoginError("‚ö†Ô∏è T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a.");
                    } else {
                        setLoginError("‚ö†Ô∏è " + error.response.data.message);
                    }
                } else {
                    setLoginError("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
                }
            } finally {
                setLoading(false);  // **T·∫Øt loading**
            }
        } else {
            setLoading(false);  // **T·∫Øt loading n·∫øu c√≥ l·ªói nh·∫≠p li·ªáu**
        }
    };       

    return (
        <div className="login-container">
            <div className="left">
                <div className="background-left">
                    <img src={bg} className="normal" alt="background" />
                    <div className="content-note">                     
                        <div className="left-row2">
                            THI·∫æT K·∫æ CHO GI·∫¢I PH√ÅP GIAO NH·∫¨N H√ÄNG
                            <br />
                            T·ªêT NH·∫§T T·ª™ TR∆Ø·ªöC ƒê·∫æN NAY
                        </div>
                        <div className="left-row3">
                            Nhanh h∆°n, r·∫ª h∆°n v√† th√¥ng minh h∆°n
                        </div>
                    </div>
                    <div className="backdrop"></div>
                </div>
            </div>

            <div className="right">
                <div className="form-container">
                    <div className="title-login">
                        <h2>ƒêƒÉng nh·∫≠p</h2>
                        <p>{greeting}</p>
                    </div>
                    <div className="login-form">
                        <div className="row">
                            <div className="row-3"></div>
                            <div className="row-6">
                                <div className="form-group">
                                    <label className="form-group-text">T√†i kho·∫£n</label>
                                    <input
                                        type="text"
                                        className={`input-field ${errors.username ? "error" : ""}`}
                                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i/email"
                                        value={username}
                                        onChange={(e) => setUsername(e.target.value)}
                                    />
                                    {errors.username && <p className="error-text">{errors.username}</p>}
                                </div>

                                <div className="form-group">
                                    <div className="form-group-pw">
                                        <label className="form-group-text">M·∫≠t kh·∫©u</label>
                                        <div className="link-container">
                                             <Link to="/forgot-password">Qu√™n m·∫≠t kh·∫©u?</Link>
                                        </div>
                                    </div>

                                    <div className="password-container">
                                        <input
                                            type={showPassword ? "text" : "password"}
                                            className={`input-field ${errors.password ? "error" : ""}`}
                                            placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                                            value={password}
                                            onChange={(e) => setPassword(e.target.value)}
                                        />
                                        <FontAwesomeIcon 
                                            icon={showPassword ? faEyeSlash : faEye} 
                                            className="toggle-password-icon"
                                            onClick={() => setShowPassword(!showPassword)}
                                        />
                                    </div>
                                    {errors.password && <p className="error-text">{errors.password}</p>}
                                </div>

                                <button className="button" onClick={handleLogin}>
                                    ƒêƒÉng nh·∫≠p
                                </button>
                                {loginError && <p className="error-text login-error">{loginError}</p>}
                                <div className="login-row3">
                                    <span className="text-normal">Ch∆∞a c√≥ t√†i kho·∫£n? </span>
                                    <Link to="/register" className="text-highlight">
                                        ƒêƒÉng k√Ω ngay
                                    </Link>
                                </div>
                            </div>
                            <div className="row-3"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
