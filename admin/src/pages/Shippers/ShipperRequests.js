import React, { useState, useEffect } from "react";
import axios from "axios";
import styles from "../../styles/ShipperRequests.module.css"; // Import CSS Module
import Swal from "sweetalert2"; // Import SweetAlert2

const API_URL = "http://localhost:5000/api/shipper";

const ShipperRequests = () => {
    const [requests, setRequests] = useState([]);
    const [selectedShipper, setSelectedShipper] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const fetchRequests = async () => {
            try {
                setLoading(true);
                setError(null);
                const res = await axios.get(`${API_URL}/shipper-requests`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                console.log("üöÄ API Response:", res.data);
                // √Ånh x·∫° d·ªØ li·ªáu ƒë·ªÉ chu·∫©n h√≥a t√™n tr∆∞·ªùng
                const mappedRequests = res.data.map((item) => ({
                    ShipperID: item.id || item.ShipperID,
                    FullName: item.fullName || item.FullName,
                    Email: item.email || item.Email,
                    PhoneNumber: item.phoneNumber || item.PhoneNumber || item.Phone,
                    Status: item.status || item.Status,
                    BirthDate: item.birthDate || item.BirthDate,
                    PermanentAddress: item.permanentAddress || item.PermanentAddress,
                    CurrentAddress: item.currentAddress || item.CurrentAddress,
                    CCCD: item.cccd || item.CCCD,
                    DriverLicense: item.driverLicense || item.DriverLicense,
                    WorkAreas: item.workAreas || item.WorkAreas,
                }));
                setRequests(mappedRequests);
            } catch (err) {
                console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
                setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch shipper, vui l√≤ng th·ª≠ l·∫°i!");
            } finally {
                setLoading(false);
            }
        };
        fetchRequests();
    }, []);

    // Chuy·ªÉn ƒë·ªïi ng√†y sinh v·ªÅ ƒë·ªãnh d·∫°ng dd/mm/yyyy
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        if (isNaN(date)) return "Ng√†y kh√¥ng h·ª£p l·ªá";

        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const year = date.getFullYear();

        return `${day}/${month}/${year}`;
    };

    // X·ª≠ l√Ω duy·ªát shipper
    const handleApprove = async (id) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n duy·ªát shipper
        const result = await Swal.fire({
            title: "X√°c nh·∫≠n duy·ªát shipper",
            text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën duy·ªát shipper n√†y?",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#6b7280",
            confirmButtonText: "Duy·ªát",
            cancelButtonText: "H·ªßy",
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.put(
                    `${API_URL}/approve/${id}`,
                    {},
                    {
                        headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                    }
                );
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                await Swal.fire({
                    title: "Th√†nh c√¥ng!",
                    text: response.data.message || "Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát v√† email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
                    icon: "success",
                    confirmButtonColor: "#ff6200",
                    confirmButtonText: "OK",
                });
                // Lo·∫°i b·ªè shipper kh·ªèi danh s√°ch "Ch·ªù Duy·ªát"
                setRequests((prevRequests) =>
                    prevRequests.filter((request) => request.ShipperID !== id)
                );
            } catch (err) {
                console.error("L·ªói khi duy·ªát shipper:", err);
                const errorMessage =
                    err.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi duy·ªát shipper, vui l√≤ng th·ª≠ l·∫°i.";
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                await Swal.fire({
                    title: "L·ªói!",
                    text: errorMessage,
                    icon: "error",
                    confirmButtonColor: "#ff4d4d",
                    confirmButtonText: "ƒê√≥ng",
                });
            }
        }
    };

    // X·ª≠ l√Ω x√≥a shipper
    const handleDelete = async (id) => {
        // Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n x√≥a shipper
        const result = await Swal.fire({
            title: "X√°c nh·∫≠n x√≥a shipper",
            text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a shipper n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#ff4d4d",
            cancelButtonColor: "#6b7280",
            confirmButtonText: "X√≥a",
            cancelButtonText: "H·ªßy",
        });

        if (result.isConfirmed) {
            try {
                await axios.delete(`${API_URL}/delete/${id}`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                await Swal.fire({
                    title: "Th√†nh c√¥ng!",
                    text: "Shipper ƒë√£ b·ªã x√≥a!",
                    icon: "success",
                    confirmButtonColor: "#ff6200",
                    confirmButtonText: "OK",
                });
                // Lo·∫°i b·ªè shipper kh·ªèi danh s√°ch
                setRequests((prevRequests) =>
                    prevRequests.filter((request) => request.ShipperID !== id)
                );
            } catch (err) {
                console.error("L·ªói khi x√≥a shipper:", err);
                // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                await Swal.fire({
                    title: "L·ªói!",
                    text: "C√≥ l·ªói x·∫£y ra khi x√≥a, vui l√≤ng th·ª≠ l·∫°i.",
                    icon: "error",
                    confirmButtonColor: "#ff4d4d",
                    confirmButtonText: "ƒê√≥ng",
                });
            }
        }
    };

    // X·ª≠ l√Ω xem chi ti·∫øt shipper
    const handleViewDetails = async (id) => {
        try {
            const response = await axios.get(`${API_URL}/shipper-details/${id}`, {
                headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
            });
            console.log("Th√¥ng tin chi ti·∫øt shipper:", response.data);
            // √Ånh x·∫° d·ªØ li·ªáu chi ti·∫øt shipper
            const shipperData = {
                ShipperID: response.data.id || response.data.ShipperID,
                FullName: response.data.fullName || response.data.FullName,
                Email: response.data.email || response.data.Email,
                PhoneNumber: response.data.phoneNumber || response.data.PhoneNumber || response.data.Phone,
                Status: response.data.status || response.data.Status,
                BirthDate: response.data.birthDate || response.data.BirthDate,
                PermanentAddress: response.data.permanentAddress || response.data.PermanentAddress,
                CurrentAddress: response.data.currentAddress || response.data.CurrentAddress,
                CCCD: response.data.cccd || response.data.CCCD,
                DriverLicense: response.data.driverLicense || response.data.DriverLicense,
                WorkAreas: response.data.workAreas || response.data.WorkAreas,
            };
            setSelectedShipper(shipperData);
        } catch (err) {
            console.error("L·ªói khi l·∫•y chi ti·∫øt shipper:", err);
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            await Swal.fire({
                title: "L·ªói!",
                text: "C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin chi ti·∫øt, vui l√≤ng th·ª≠ l·∫°i.",
                icon: "error",
                confirmButtonColor: "#ff4d4d",
                confirmButtonText: "ƒê√≥ng",
            });
        }
    };

    // X·ª≠ l√Ω t·∫Øt chi ti·∫øt shipper
    const handleCloseDetails = () => {
        setSelectedShipper(null);
    };

    // ƒê·∫øm s·ªë shipper ƒëang ch·ªù duy·ªát
    const pendingShipperCount = requests.length;

    return (
        <div className={styles.container}>
            <h2 className={styles.title}>
                Danh s√°ch Shipper Ch·ªù Duy·ªát{" "}
                <span className={styles.pendingCount}>{pendingShipperCount}</span>
            </h2>
            {loading && <p className={styles.textCenter}>ƒêang t·∫£i...</p>}
            {error && <p className={styles.textCenter} style={{ color: "red" }}>{error}</p>}
            {!loading && requests.length === 0 ? (
                <p className={styles.textCenter}>Kh√¥ng c√≥ shipper n√†o.</p>
            ) : (
                !loading && (
                    <div className={styles.tableContainer}>
                        <table>
                            <thead>
                                <tr>
                                    <th>H·ªç v√† T√™n</th>
                                    <th>Email</th>
                                    <th>S·ªë ƒêi·ªán Tho·∫°i</th>
                                    <th>Tr·∫°ng Th√°i</th>
                                    <th>H√†nh ƒê·ªông</th>
                                </tr>
                            </thead>
                            <tbody>
                                {requests.map((request) => (
                                    <tr key={request.ShipperID}>
                                        <td>{request.FullName}</td>
                                        <td>{request.Email}</td>
                                        <td>{request.PhoneNumber}</td>
                                        <td
                                            className={
                                                request.Status === "Pending"
                                                    ? styles.statusPending
                                                    : styles.statusApproved
                                            }
                                        >
                                            {request.Status === "Pending" ? "Ch·ªù Duy·ªát" : "ƒê√£ Duy·ªát"}
                                        </td>
                                        <td>
                                            {request.Status === "Pending" && (
                                                <button
                                                    onClick={() => handleApprove(request.ShipperID)}
                                                    className={styles.btnApprove}
                                                >
                                                    Duy·ªát
                                                </button>
                                            )}
                                            <button
                                                onClick={() => handleDelete(request.ShipperID)}
                                                className={styles.btnDelete}
                                            >
                                                X√≥a
                                            </button>
                                            <button
                                                onClick={() => handleViewDetails(request.ShipperID)}
                                                className={styles.btnDetails}
                                            >
                                                Xem Chi Ti·∫øt
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )
            )}

            {selectedShipper && (
                <div className={styles.shipperDetails}>
                    <button onClick={handleCloseDetails} className={styles.btnClose}>
                        X
                    </button>
                    <h3>Th√¥ng tin chi ti·∫øt shipper</h3>
                    <ul>
                        <li>
                            <strong>H·ªç v√† T√™n:</strong> {selectedShipper.FullName}
                        </li>
                        <li>
                            <strong>Ng√†y Sinh:</strong> {formatDate(selectedShipper.BirthDate)}
                        </li>
                        <li>
                            <strong>S·ªë CCCD:</strong> {selectedShipper.CCCD}
                        </li>
                        <li>
                            <strong>Email:</strong> {selectedShipper.Email}
                        </li>
                        <li>
                            <strong>S·ªë ƒêi·ªán Tho·∫°i:</strong> {selectedShipper.PhoneNumber}
                        </li>
                        <li>
                            <strong>Gi·∫•y Ph√©p L√°i Xe:</strong> {selectedShipper.DriverLicense}
                        </li>
                        <li>
                            <strong>ƒê·ªãa Ch·ªâ Th∆∞·ªùng Tr√∫:</strong> {selectedShipper.PermanentAddress}
                        </li>
                        <li>
                            <strong>ƒê·ªãa Ch·ªâ Hi·ªán T·∫°i:</strong> {selectedShipper.CurrentAddress}
                        </li>
                        <li>
                            <strong>C∆° s·ªü l√†m vi·ªác:</strong> {selectedShipper.WorkAreas}
                        </li>
                    </ul>
                </div>
            )}
        </div>
    );
};

export default ShipperRequests;