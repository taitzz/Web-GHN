import React, { useState, useEffect } from "react";
import axios from "axios";
import Swal from "sweetalert2"; // Import SweetAlert2
import styles from "../../styles/DetailsShipper.module.css"; // Import CSS Module

const API_URL = "http://localhost:5000/api/shipper";

const DetailsShipper = () => {
    const [employees, setEmployees] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const fetchEmployees = async () => {
            setLoading(true);
            try {
                const res = await axios.get(`${API_URL}/approved-shippers`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                console.log("üöÄ API Response:", res.data);
                // Log chi ti·∫øt gi√° tr·ªã IsAvailable c·ªßa t·ª´ng shipper
                res.data.forEach((employee, index) => {
                    console.log(
                        `Shipper ${index + 1}: IsAvailable =`,
                        employee.IsAvailable,
                        `| Type:`,
                        typeof employee.IsAvailable
                    );
                });
                setEmployees(res.data);
            } catch (err) {
                console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchEmployees();
    }, []);

    // Chuy·ªÉn ƒë·ªïi ng√†y sinh v·ªÅ ƒë·ªãnh d·∫°ng dd/mm/yyyy
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        if (isNaN(date)) {
            return "Ng√†y kh√¥ng h·ª£p l·ªá";
        }
        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    };

    // H√†m x·ª≠ l√Ω WorkAreas ƒë·ªÉ hi·ªÉn th·ªã
    const formatWorkAreas = (workAreas) => {
        let workAreasDisplay = "Ch∆∞a c√≥ th√¥ng tin";
        if (workAreas) {
            try {
                if (typeof workAreas === "string") {
                    try {
                        const parsedWorkAreas = JSON.parse(workAreas);
                        if (Array.isArray(parsedWorkAreas)) {
                            workAreasDisplay = parsedWorkAreas.join(", ");
                        } else {
                            workAreasDisplay = workAreas;
                        }
                    } catch (err) {
                        workAreasDisplay = workAreas;
                    }
                } else if (Array.isArray(workAreas)) {
                    workAreasDisplay = workAreas.join(", ");
                } else {
                    workAreasDisplay = String(workAreas);
                }
            } catch (err) {
                console.error("L·ªói khi x·ª≠ l√Ω WorkAreas:", err);
                workAreasDisplay = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
            }
        }
        return workAreasDisplay;
    };

    // L·ªçc nh√¢n vi√™n theo t√¨m ki·∫øm (theo t√™n, email, s·ªë CCCD ho·∫∑c GPLX)
    const filteredEmployees = employees.filter(
        (employee) =>
            employee.FullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            employee.Email.toLowerCase().includes(searchTerm.toLowerCase()) ||
            employee.CCCD.includes(searchTerm) ||
            employee.DriverLicense.includes(searchTerm)
    );

    // X√≥a nh√¢n vi√™n
    const handleDelete = async (id, isAvailable) => {
        // Chuy·ªÉn ƒë·ªïi isAvailable th√†nh s·ªë n·∫øu n√≥ l√† chu·ªói
        const isAvailableNumber = Number(isAvailable);

        // Ki·ªÉm tra n·∫øu shipper ƒëang giao h√†ng (IsAvailable = 0)
        if (isAvailableNumber === 0) {
            await Swal.fire({
                title: "L·ªói!",
                text: "Kh√¥ng th·ªÉ x√≥a shipper ƒëang giao h√†ng.",
                icon: "error",
                confirmButtonColor: "#ff4d4d",
                confirmButtonText: "ƒê√≥ng",
            });
            return; // D·ª´ng h√†m, kh√¥ng th·ª±c hi·ªán x√≥a
        }

        // N·∫øu shipper kh√¥ng ƒëang giao h√†ng, ti·∫øp t·ª•c hi·ªÉn th·ªã x√°c nh·∫≠n x√≥a
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn?",
            text: "B·∫°n c√≥ mu·ªën x√≥a nh√¢n vi√™n n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#ff4d4d",
            cancelButtonColor: "#6b7280",
            confirmButtonText: "X√≥a",
            cancelButtonText: "H·ªßy",
        });

        if (result.isConfirmed) {
            try {
                await axios.delete(`${API_URL}/delete/${id}`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                setEmployees(employees.filter((employee) => employee.ShipperID !== id));
                Swal.fire("ƒê√£ x√≥a!", "Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.", "success");
            } catch (err) {
                console.error("‚ùå L·ªói khi x√≥a nh√¢n vi√™n:", err);
                Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n!", "error");
            }
        }
    };

    // Xem chi ti·∫øt nh√¢n vi√™n
    const handleViewDetails = (employee) => {
        const workAreasDisplay = formatWorkAreas(employee.WorkAreas);

        Swal.fire({
            title: "Th√¥ng tin chi ti·∫øt nh√¢n vi√™n",
            html: `
                <div style="
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                    font-family: Arial, sans-serif;
                ">
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">H·ªç v√† T√™n:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.FullName}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">Ng√†y Sinh:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${formatDate(employee.BirthDate)}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">S·ªë CCCD:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.CCCD}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">S·ªë ƒêi·ªán Tho·∫°i:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.PhoneNumber || employee.Phone}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">Email:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.Email}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">ƒê·ªãa Ch·ªâ Th∆∞·ªùng Tr√∫:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.PermanentAddress}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">ƒê·ªãa Ch·ªâ Hi·ªán T·∫°i:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.CurrentAddress}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">Gi·∫•y Ph√©p L√°i Xe:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.DriverLicense}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">T√™n T√†i Kho·∫£n:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.EmployeeID}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        border-bottom: 1px solid #eee;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">M·∫≠t Kh·∫©u:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${employee.Password}</span>
                    </div>
                    <div style="
                        display: flex;
                        align-items: flex-start;
                        padding: 12px 0;
                        transition: background-color 0.2s ease;
                    " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                        <span style="
                            font-weight: 600;
                            color: #333;
                            width: 180px;
                            flex-shrink: 0;
                            font-size: 14px;
                        ">C∆° S·ªü L√†m Vi·ªác:</span>
                        <span style="
                            color: #555;
                            font-size: 14px;
                            word-break: break-word;
                            margin-left: 5px;
                        ">${workAreasDisplay}</span>
                    </div>
                </div>
            `,
            confirmButtonText: "ƒê√≥ng",
            confirmButtonColor: "#ff6200",
            width: "700px",
            customClass: {
                popup: "custom-modal",
                title: "custom-modal-title",
                htmlContainer: "custom-modal-content",
                confirmButton: "custom-modal-button",
            },
        });
    };

    return (
        <div className={styles.container}>
            {/* √î t√¨m ki·∫øm */}
            <div className={styles.searchContainer}>
                <input
                    type="text"
                    placeholder="T√¨m ki·∫øm nh√¢n vi√™n theo t√™n, email, CCCD ho·∫∑c GPLX"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </div>

            {loading ? (
                <div className={styles.textCenter}>
                    <p>ƒêang t·∫£i...</p>
                </div>
            ) : filteredEmployees.length === 0 ? (
                <p className={styles.textCenter}>Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o.</p>
            ) : (
                <div className={styles.tableContainer}>
                    <table className={styles.shipperTable}>
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>H·ªç T√™n</th>
                                <th>S·ªë ƒêT</th>
                                <th>Email</th>
                                <th>C∆° S·ªü</th>
                                <th>Tr·∫°ng Th√°i</th>
                                <th>H√†nh ƒê·ªông</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredEmployees.map((employee, index) => {
                                // Chuy·ªÉn ƒë·ªïi IsAvailable th√†nh s·ªë n·∫øu n√≥ l√† chu·ªói
                                const isAvailable = Number(employee.IsAvailable);

                                return (
                                    <tr key={employee.ShipperID}>
                                        <td>{index + 1}</td>
                                        <td>{employee.FullName}</td>
                                        <td>{employee.PhoneNumber || employee.Phone}</td>
                                        <td>{employee.Email}</td>
                                        <td>{formatWorkAreas(employee.WorkAreas)}</td>
                                        <td
                                            className={
                                                isAvailable === 1
                                                    ? styles.statusIdle
                                                    : styles.statusDelivering
                                            }
                                        >
                                            {isAvailable === 1
                                                ? "R·∫£nh"
                                                : isAvailable === 0
                                                ? "Giao h√†ng"
                                                : "Kh√¥ng x√°c ƒë·ªãnh"}
                                        </td>
                                        <td>
                                            <button
                                                className={styles.viewButton}
                                                onClick={() => handleViewDetails(employee)}
                                            >
                                                Xem chi ti·∫øt
                                            </button>
                                            <button
                                                className={styles.deleteButton}
                                                onClick={() =>
                                                    handleDelete(employee.ShipperID, employee.IsAvailable)
                                                }
                                            >
                                                X√≥a t√†i kho·∫£n
                                            </button>
                                        </td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
};

export default DetailsShipper;