import React, { useState, useEffect } from "react";
import axios from "axios";
import Swal from "sweetalert2"; // Import SweetAlert2
import styles from "../../styles/DetailsShipper.module.css"; // Import CSS Module

const API_URL = "http://localhost:5000/api/shipper";

const DetailsShipper = () => {
    const [employees, setEmployees] = useState([]);
    const [searchTerm, setSearchTerm] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const [loading, setLoading] = useState(false);
    const employeesPerPage = 10;

    useEffect(() => {
        const fetchEmployees = async () => {
            setLoading(true);
            try {
                const res = await axios.get(`${API_URL}/approved-shippers`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                console.log("üöÄ API Response:", res.data);
                setEmployees(res.data);
            } catch (err) {
                console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchEmployees();
    }, []);

    // Chuy·ªÉn ƒë·ªïi ng√†y sinh v·ªÅ ƒë·ªãnh d·∫°ng dd/mm/yyyy
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        if (isNaN(date)) {
            return "Ng√†y kh√¥ng h·ª£p l·ªá";
        }
        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    };

    // L·ªçc nh√¢n vi√™n theo t√¨m ki·∫øm (theo t√™n, email, s·ªë CCCD ho·∫∑c GPLX)
    const filteredEmployees = employees.filter(
        (employee) =>
            employee.FullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
            employee.Email.toLowerCase().includes(searchTerm.toLowerCase()) ||
            employee.CCCD.includes(searchTerm) ||
            employee.DriverLicense.includes(searchTerm)
    );

    // X√≥a nh√¢n vi√™n
    const handleDelete = async (id) => {
        const result = await Swal.fire({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn?",
            text: "B·∫°n c√≥ mu·ªën x√≥a nh√¢n vi√™n n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#ff4d4d",
            cancelButtonColor: "#6b7280",
            confirmButtonText: "X√≥a",
            cancelButtonText: "H·ªßy",
        });

        if (result.isConfirmed) {
            try {
                await axios.delete(`${API_URL}/delete/${id}`, {
                    headers: { Authorization: `Bearer ${localStorage.getItem("adminToken")}` },
                });
                setEmployees(employees.filter((employee) => employee.ShipperID !== id));
                Swal.fire("ƒê√£ x√≥a!", "Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.", "success");
            } catch (err) {
                console.error("‚ùå L·ªói khi x√≥a nh√¢n vi√™n:", err);
                Swal.fire("L·ªói!", "Kh√¥ng th·ªÉ x√≥a nh√¢n vi√™n!", "error");
            }
        }
    };

   // Xem chi ti·∫øt nh√¢n vi√™n
   const handleViewDetails = (employee) => {
    // Chuy·ªÉn WorkAreas t·ª´ JSON (m·∫£ng) th√†nh chu·ªói ƒë·ªÉ hi·ªÉn th·ªã
    const workAreasDisplay = employee.WorkAreas
        ? JSON.parse(employee.WorkAreas).join(", ")
        : "Ch∆∞a c√≥ th√¥ng tin";

    Swal.fire({
        title: "Th√¥ng tin chi ti·∫øt nh√¢n vi√™n",
        html: `
            <div style="
                display: flex;
                flex-direction: column;
                gap: 10px;
                font-family: Arial, sans-serif;
            ">
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">H·ªç v√† T√™n:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.FullName}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">Ng√†y Sinh:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${formatDate(employee.BirthDate)}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">S·ªë CCCD:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.CCCD}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">S·ªë ƒêi·ªán Tho·∫°i:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.PhoneNumber || employee.Phone}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">Email:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.Email}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">ƒê·ªãa Ch·ªâ Th∆∞·ªùng Tr√∫:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.PermanentAddress}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">ƒê·ªãa Ch·ªâ Hi·ªán T·∫°i:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.CurrentAddress}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">Gi·∫•y Ph√©p L√°i Xe:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.DriverLicense}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">T√™n T√†i Kho·∫£n:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.EmployeeID}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    border-bottom: 1px solid #eee;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">M·∫≠t Kh·∫©u:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${employee.Password}</span>
                </div>
                <div style="
                    display: flex;
                    align-items: flex-start;
                    padding: 12px 0;
                    transition: background-color 0.2s ease;
                " onmouseover="this.style.backgroundColor='#f0f0f0'" onmouseout="this.style.backgroundColor='transparent'">
                    <span style="
                        font-weight: 600;
                        color: #333;
                        width: 180px;
                        flex-shrink: 0;
                        font-size: 14px;
                    ">C∆° S·ªü L√†m Vi·ªác:</span>
                    <span style="
                        color: #555;
                        font-size: 14px;
                        word-break: break-word;
                        margin-left: 5px;
                    ">${workAreasDisplay}</span>
                </div>
            </div>
        `,
        confirmButtonText: "ƒê√≥ng",
        confirmButtonColor: "#ff6200",
        width: "700px",
        customClass: {
            popup: "custom-modal",
            title: "custom-modal-title",
            htmlContainer: "custom-modal-content",
            confirmButton: "custom-modal-button",
        },
    });
};

    // Ph√¢n trang
    const indexOfLastEmployee = currentPage * employeesPerPage;
    const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;
    const currentEmployees = filteredEmployees.slice(indexOfFirstEmployee, indexOfLastEmployee);
    const totalPages = Math.ceil(filteredEmployees.length / employeesPerPage);

    return (
        <div className={styles.container}>          

            {/* √î t√¨m ki·∫øm */}
            <div className={styles.searchContainer}>
                <input
                    type="text"
                    placeholder="T√¨m ki·∫øm nh√¢n vi√™n theo t√™n, email, CCCD ho·∫∑c GPLX"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </div>

            {loading ? (
                <div className={styles.textCenter}>
                    <p>ƒêang t·∫£i...</p>
                </div>
            ) : filteredEmployees.length === 0 ? (
                <p className={styles.textCenter}>Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o.</p>
            ) : (
                <>
                    <div className={styles.tableContainer}>
                        <table className={styles.shipperTable}>
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>H·ªç v√† T√™n</th>
                                    <th>S·ªë ƒêi·ªán Tho·∫°i</th>
                                    <th>Email</th>
                                    <th>H√†nh ƒê·ªông</th>
                                </tr>
                            </thead>
                            <tbody>
                                {currentEmployees.map((employee, index) => (
                                    <tr key={employee.ShipperID}>
                                        <td>{indexOfFirstEmployee + index + 1}</td>
                                        <td>{employee.FullName}</td>
                                        <td>{employee.PhoneNumber || employee.Phone}</td>
                                        <td>{employee.Email}</td>
                                        <td>
                                            <button
                                                className={styles.viewButton}
                                                onClick={() => handleViewDetails(employee)}
                                            >
                                                Xem chi ti·∫øt
                                            </button>
                                            <button
                                                className={styles.deleteButton}
                                                onClick={() => handleDelete(employee.ShipperID)}
                                            >
                                                X√≥a t√†i kho·∫£n
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>

                    {/* Ph√¢n trang */}
                    {totalPages > 1 && (
                        <div className={styles.pagination}>
                            <button
                                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
                                disabled={currentPage === 1}
                            >
                                Tr∆∞·ªõc
                            </button>
                            <span>
                                Trang {currentPage} / {totalPages}
                            </span>
                            <button
                                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
                                disabled={currentPage === totalPages}
                            >
                                Sau
                            </button>
                        </div>
                    )}
                </>
            )}
        </div>
    );
};

export default DetailsShipper;