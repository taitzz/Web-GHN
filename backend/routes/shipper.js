const express = require("express");
const bcrypt = require("bcryptjs");
const sql = require("mssql");
const { getPendingShippers, approveShipper, deleteShipper, insertShipper } = require("../models/shipperModel");
const { poolPromise } = require("../config/db");
const nodemailer = require("nodemailer");

const router = express.Router();

// API: L·∫•y danh s√°ch shipper ch·ªù duy·ªát
router.get("/shipper-requests", async (req, res) => {
    try {
        const shippers = await getPendingShippers();
        res.json(shippers);
    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

// API: L·∫•y th√¥ng tin chi ti·∫øt shipper (c√≥ CCCD & GPLX)
router.get("/shipper-details/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input("id", sql.Int, id)
            .query("SELECT * FROM Shipper WHERE ShipperID = @id");

        const shipper = result.recordset[0];
        if (!shipper) {
            return res.status(404).json({ message: "Shipper kh√¥ng t·ªìn t·∫°i!" });
        }

        res.json(shipper);
    } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt shipper:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

// API: ƒêƒÉng k√Ω shipper (c√≥ CCCD & GPLX)
router.post("/register", async (req, res) => {
    const { fullName, birthDate, permanentAddress, currentAddress, phoneNumber, email, cccd, driverLicense } = req.body;

    if (!fullName || !birthDate || !permanentAddress || !currentAddress || !phoneNumber || !email || !cccd || !driverLicense) {
        return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // Ki·ªÉm tra CCCD (12 s·ªë)
    if (!/^\d{12}$/.test(cccd)) {
        return res.status(400).json({ message: "S·ªë CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë." });
    }

    // Ki·ªÉm tra GPLX (12 s·ªë)
    if (!/^\d{12}$/.test(driverLicense)) {
        return res.status(400).json({ message: "S·ªë gi·∫•y ph√©p l√°i xe ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë." });
    }

    try {
        await insertShipper(fullName, birthDate, permanentAddress, currentAddress, phoneNumber, email, cccd, driverLicense);
        res.status(201).json({ message: "ƒêƒÉng k√≠ th√†nh c√¥ng!Ch·ªù duy·ªát t·ª´ ch·ªß c·ª≠a h√†ng." });
    } catch (err) {
        console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω shipper:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

// API: ƒêƒÉng nh·∫≠p shipper
router.post("/login", async (req, res) => {
    const { employeeId, password } = req.body;

    try {
        // Ki·ªÉm tra m√£ nh√¢n vi√™n trong database
        const pool = await poolPromise;
        const result = await pool.request()
            .input("employeeId", sql.NVarChar, employeeId)
            .query("SELECT * FROM Shipper WHERE EmployeeID = @employeeId");

        const shipper = result.recordset[0]; // L·∫•y shipper ƒë·∫ßu ti√™n

        if (!shipper) {
            return res.status(400).json({ success: false, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, shipper.Password);
        if (!isMatch) {
            return res.status(400).json({ success: false, message: "Sai m·∫≠t kh·∫©u" });
        }

        // N·∫øu ƒëƒÉng nh·∫≠p th√†nh c√¥ng
        res.json({ success: true, message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng" });
    } catch (err) {
        console.error("L·ªói khi ƒëƒÉng nh·∫≠p:", err);
        res.status(500).json({ success: false, message: "L·ªói server" });
    }
});

// API: X√≥a shipper kh·ªèi database
router.delete("/delete/:id", async (req, res) => {
    const { id } = req.params;

    if (isNaN(id) || id <= 0) {
        return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    try {
        await deleteShipper(id);
        res.json({ message: "Shipper ƒë√£ b·ªã x√≥a kh·ªèi database!" });
    } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a shipper:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

// API: Duy·ªát shipper & G·ª≠i email (c√≥ CCCD & GPLX)
router.put("/approve/:id", async (req, res) => {
    const { id } = req.params;

    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input("id", sql.Int, id)
            .query("SELECT * FROM Shipper WHERE ShipperID = @id");

        const shipper = result.recordset[0];
        if (!shipper) {
            return res.status(400).json({ message: "Shipper kh√¥ng t·ªìn t·∫°i!" });
        }

        const employeeID = `SP${String(shipper.ShipperID).padStart(4, '0')}`;
        const generatedPassword = Math.random().toString(36).slice(-8);
        const hashedPassword = await bcrypt.hash(generatedPassword, 10);

        await approveShipper(id, employeeID, hashedPassword);

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: "taivu1602@gmail.com",
                pass: "vhfx zwol vgsw usqr",
            },
        });

        const mailOptions = {
            from: "taivu1602@gmail.com",
            to: shipper.Email,
            subject: "ƒêƒÉng k√Ω th√†nh c√¥ng - GIAO H√ÄNG NHANH",
            text: `Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi GIAO H√ÄNG NHANH!\n\n` +
                  `- T√†i kho·∫£n: ${employeeID}\n` +
                  `- M·∫≠t kh·∫©u: ${generatedPassword}\n` +                
                  `‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng cung c·∫•p th√¥ng tin n√†y cho b·∫•t k·ª≥ ai.\n` +
                  `C·∫£m ∆°n b·∫°n ƒë√£ tham gia! üöÄ`,
        };

        transporter.sendMail(mailOptions, (err, info) => {
            if (err) {
                console.error("L·ªói khi g·ª≠i email:", err);
                return res.status(500).json({ message: "L·ªói khi g·ª≠i email" });
            }
            console.log("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i:", info.response);
        });

        res.json({ message: "Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát v√† th√¥ng tin t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email" });
    } catch (err) {
        console.error("‚ùå L·ªói khi duy·ªát shipper:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

// API: L·∫•y danh s√°ch shipper ƒë√£ duy·ªát (c√≥ CCCD & GPLX)
router.get("/approved-shippers", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT * FROM Shipper WHERE Status = 'Approved'");

        res.json(result.recordset);
    } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch shipper ƒë√£ duy·ªát:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

module.exports = router;
