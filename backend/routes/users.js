const express = require('express');
const sql = require('mssql');
const bcrypt = require('bcryptjs');
const nodemailer = require('nodemailer');
const authMiddleware = require("../middleware/auth");
const { poolPromise } = require('../config/db'); 

const router = express.Router();

// API: ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
router.post('/register', async (req, res) => {
    const { fullName, email, phone, address, username, password, confirmPassword, birthDate } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!fullName || !email || !phone || !address || !username || !password || !confirmPassword || !birthDate) {
        return res.status(400).json({ message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin' });
    }

    if (password !== confirmPassword) {
        return res.status(400).json({ message: 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp' });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y sinh
    if (isNaN(Date.parse(birthDate))) {
        return res.status(400).json({ message: 'Ng√†y sinh kh√¥ng h·ª£p l·ªá' });
    }

    try {
        const pool = await poolPromise;

        // ‚úÖ Ki·ªÉm tra Email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const checkEmail = await pool.request()
            .input('email', sql.NVarChar, email)
            .query('SELECT Email FROM Users WHERE Email = @email');

        if (checkEmail.recordset.length > 0) {
            return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i! Vui l√≤ng s·ª≠ d·ª•ng email kh√°c.' });
        }

        // ‚úÖ Ki·ªÉm tra Username ƒë√£ t·ªìn t·∫°i ch∆∞a
        const checkUsername = await pool.request()
            .input('username', sql.NVarChar, username)
            .query('SELECT Username FROM Users WHERE Username = @username');

        if (checkUsername.recordset.length > 0) {
            return res.status(400).json({ message: 'T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn t√™n kh√°c.' });
        }

        // ‚úÖ Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
        const checkPhone = await pool.request()
            .input('phone', sql.NVarChar, phone)
            .query('SELECT Phone FROM Users WHERE Phone = @phone');

        if (checkPhone.recordset.length > 0) {
            return res.status(400).json({ message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i! Vui l√≤ng nh·∫≠p s·ªë kh√°c.' });
        }

        // **M√£ h√≥a m·∫≠t kh·∫©u**
        const hashedPassword = await bcrypt.hash(password, 10);

        // **Chuy·ªÉn ƒë·ªïi ng√†y sinh sang ƒë·ªãnh d·∫°ng YYYY-MM-DD**
        const formattedBirthDate = new Date(birthDate).toISOString().split("T")[0];

        // ‚úÖ Th√™m ng∆∞·ªùi d√πng m·ªõi v√†o CSDL
        await pool.request()
            .input('fullName', sql.NVarChar, fullName)
            .input('email', sql.NVarChar, email)
            .input('phone', sql.NVarChar, phone)
            .input('address', sql.NVarChar, address)
            .input('username', sql.NVarChar, username)
            .input('password', sql.NVarChar, hashedPassword)
            .input('birthDate', sql.Date, formattedBirthDate)
            .query(`
                INSERT INTO Users (FullName, Email, Phone, Address, Username, Password, BirthDate)
                VALUES (@fullName, @email, @phone, @address, @username, @password, @birthDate)
            `);

        res.status(201).json({ message: 'üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!' });

    } catch (err) {
        console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.' });
    }
});

// API: ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
const jwt = require("jsonwebtoken");

router.post('/login', async (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u' });
    }

    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('username', sql.NVarChar, username)
            .query('SELECT UserID, FullName, Password, Email FROM Users WHERE Username = @username OR Email = @username');

        const user = result.recordset[0];

        if (!user) {
            return res.status(400).json({ message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });
        }

        const isMatch = await bcrypt.compare(password, user.Password);
        if (!isMatch) {
            return res.status(400).json({ message: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng' });
        }

        // ‚úÖ T·∫°o Token JWT v·ªõi UserID thay v√¨ id
        const token = jwt.sign(
            { UserID: user.UserID, fullName: user.FullName },
            process.env.JWT_SECRET
        );  

        res.status(200).json({
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            token,  
            user: {
                id: user.UserID,
                fullName: user.FullName,
                email: user.Email
            }
        });

    } catch (err) {
        console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API ki·ªÉm tra t√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
router.post('/check-username', async (req, res) => {
    const { username } = req.body;

    try {
        const pool = await poolPromise;
        const result = await pool.request()
            .input('username', sql.NVarChar, username)
            .query('SELECT UserID FROM Users WHERE Username = @username');

        if (result.recordset.length > 0) {
            return res.status(200).json({ exists: true });
        } else {
            return res.status(200).json({ exists: false });
        }
    } catch (err) {
        console.error('‚ùå L·ªói ki·ªÉm tra t√™n t√†i kho·∫£n:', err);
        res.status(500).json({ message: 'L·ªói server!' });
    }
});

// API: L·∫•y danh s√°ch ng∆∞·ªùi d√πng (Ch·ªâ Admin ho·∫∑c Ng∆∞·ªùi c√≥ quy·ªÅn)
router.get('/list', async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query(`
            SELECT UserID, FullName, Email, Phone, Address, Username, BirthDate FROM Users
        `);
        res.status(200).json(result.recordset);
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server' });
    }
});

//API : L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
router.get('/profile', authMiddleware, async (req, res) => {
    try {
        const pool = await poolPromise;
        const userId = req.user.id; 
        console.log("üîç UserID t·ª´ token:", userId);

        const result = await pool.request()
            .input('userId', sql.Int, userId)
            .query('SELECT FullName FROM Users WHERE UserID = @userId');

        console.log("üì¢ K·∫øt qu·∫£ truy v·∫•n:", result.recordset);

        if (result.recordset.length > 0) {
            res.status(200).json({ fullName: result.recordset[0].FullName });
        } else {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
        }
    } catch (err) {
        console.error("‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
        res.status(500).json({ message: "L·ªói server" });
    }
});

//API : X√≥a ng∆∞·ªùi d√πng theo ID
router.delete("/:id", async (req, res) => {
    const { id } = req.params;
    try {
        let pool = await poolPromise; 
        let result = await pool
            .request()
            .input("UserID", sql.Int, id)
            .query("DELETE FROM Users WHERE UserID = @UserID");

        if (result.rowsAffected[0] > 0) {
            res.status(200).json({ message: "Ng∆∞·ªùi d√πng ƒë√£ b·ªã x√≥a." });
        } else {
            res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
        }
    } catch (err) {
        console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", err);
        res.status(500).json({ message: "L·ªói server." });
    }
});

// API g·ª≠i OTP n·∫øu Username & Email h·ª£p l·ªá
router.post("/forgot-password", async (req, res) => {
    const { username, email } = req.body;

    try {
        const pool = await poolPromise; 

        const result = await pool
            .request()
            .input("username", sql.NVarChar, username)
            .query("SELECT Email FROM Users WHERE Username = @username");

        if (!result.recordset.length || result.recordset[0].Email !== email) {
            return res.status(400).json({ message: "T√†i kho·∫£n ho·∫∑c email kh√¥ng ƒë√∫ng!" });
        }

        // T·∫°o OTP 6 s·ªë ng·∫´u nhi√™n
        const otp = Math.floor(100000 + Math.random() * 900000).toString();

        // L∆∞u OTP v√† th·ªùi gian h·∫øt h·∫°n v√†o CSDL (th·ªùi gian h·∫øt h·∫°n l√† 10 ph√∫t)
        const otpExpires = new Date(Date.now() + 10 * 60 * 1000);  // Th·ªùi gian h·∫øt h·∫°n 10 ph√∫t

        await pool
            .request()
            .input("username", sql.NVarChar, username)
            .input("otp", sql.NVarChar, otp)
            .input("otpExpires", sql.DateTime, otpExpires)
            .query("UPDATE Users SET OTP = @otp, OtpExpires = @otpExpires WHERE Username = @username");

        // C·∫•u h√¨nh g·ª≠i email
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: "taivu1602@gmail.com", 
                pass: "vhfx zwol vgsw usqr", 
            },
        });

        const mailOptions = {
            from: "taivu1602@gmail.com", 
            to: email,
            subject: "M√£ OTP ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
            text: `M√£ OTP ƒë·ªÉ l·∫•y m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp}`,
        };

        // G·ª≠i email ch·ª©a m√£ OTP
        await transporter.sendMail(mailOptions);

        res.status(200).json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n." });

    } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i OTP:", error);
        res.status(500).json({ message: "L·ªói server, th·ª≠ l·∫°i sau!" });
    }
});

//API : ƒê·ªïi m·∫≠t kh·∫©u
router.post("/reset-password", async (req, res) => {
    const { username, otp, newPassword } = req.body;

    try {
        const pool = await poolPromise;

        const result = await pool
            .request()
            .input("username", sql.NVarChar, username)
            .query("SELECT OTP, OtpExpires FROM Users WHERE Username = @username");

        if (!result.recordset.length) {
            return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
        }

        const user = result.recordset[0];

        // Ki·ªÉm tra OTP v√† th·ªùi gian h·∫øt h·∫°n
        if (user.OTP !== otp || new Date() > new Date(user.OtpExpires)) {
            return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database v√† x√≥a OTP c√πng v·ªõi th·ªùi gian h·∫øt h·∫°n
        await pool
            .request()
            .input("username", sql.NVarChar, username)
            .input("hashedPassword", sql.NVarChar, hashedPassword)
            .query("UPDATE Users SET Password = @hashedPassword, OTP = NULL, OtpExpires = NULL WHERE Username = @username");

        res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng!" });

    } catch (error) {
        console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
        res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau!" });
    }
});

module.exports = router;
