const jwt = require("jsonwebtoken");
const Shipper = require("../models/Shipper");
const Order = require("../models/Orders");

class ShipperController {
    // Ki·ªÉm tra email tr√πng l·∫∑p (ph∆∞∆°ng th·ª©c m·ªõi)
    static async checkEmail(req, res) {
        try {
            const { email } = req.body;

            if (!email) {
                return res.status(400).json({ message: "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
            }

            const emailExists = await Shipper.checkEmailExists(email);
            console.log(`[ShipperController.checkEmail] Ki·ªÉm tra email: ${email}, K·∫øt qu·∫£: ${emailExists}`);
            return res.status(200).json({ exists: emailExists });
        } catch (err) {
            console.error("[ShipperController.checkEmail] L·ªói:", { message: err.message, stack: err.stack });
            return res.status(500).json({ message: err.message || "L·ªói server khi ki·ªÉm tra email!" });
        }
    }
    
    // ƒêƒÉng k√Ω shipper
    static async register(req, res) {
        const { fullName, birthDate, permanentAddress, currentAddress, phoneNumber, email, cccd, driverLicense, workAreas } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!fullName || !birthDate || !permanentAddress || !currentAddress || !phoneNumber || !email || !cccd || !driverLicense) {
            return res.status(400).json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
        }

        if (isNaN(Date.parse(birthDate))) {
            return res.status(400).json({ message: "Ng√†y sinh kh√¥ng h·ª£p l·ªá" });
        }

        if (!workAreas || workAreas.length === 0) {
            return res.status(400).json({ message: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c∆° s·ªü l√†m vi·ªác" });
        }

        try {
            // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
            const existingShipper = await Shipper.getShipperByEmail(email);
            if (existingShipper) {
                return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
            }

            const shipperId = await Shipper.insertShipper(
                fullName,
                new Date(birthDate),
                permanentAddress,
                currentAddress,
                phoneNumber,
                email,
                cccd,
                driverLicense,
                workAreas 
            );

            console.log(`[ShipperController.register] ƒê√£ ƒëƒÉng k√Ω shipper: ${email}, ShipperID: ${shipperId}`);
            res.status(201).json({ message: "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng, ch·ªù admin duy·ªát!", shipperId });
        } catch (err) {
            console.error("[ShipperController.register] L·ªói:", { message: err.message, stack: err.stack });
            if (err.message.includes("CCCD")) {
                return res.status(400).json({ message: err.message });
            }
            if (err.message.includes("DriverLicense")) {
                return res.status(400).json({ message: err.message });
            }
            res.status(500).json({ message: err.message || "L·ªói server!" });
        }
    }

    // ƒêƒÉng nh·∫≠p shipper
    static async login(req, res) {
        try {
            const { employeeId, password } = req.body;

            if (!employeeId || !password) {
                return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
            }

            const shipper = await Shipper.getShipperByEmployeeId(employeeId);
            if (!shipper) {
                return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
            }

            if (shipper.Status !== "Approved") {
                return res.status(403).json({ message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c duy·ªát!" });
            }

            if (shipper.Password !== password) {
                return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
            }

            const token = jwt.sign(
                { shipperId: shipper.ShipperID, role: "shipper" },
                process.env.JWT_SECRET || "your_jwt_secret"
            );

            res.status(200).json({
                message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
                token,
                shipper: {
                    id: shipper.ShipperID,
                    fullName: shipper.FullName,
                },
            });
        } catch (err) {
            console.error("[ShipperController.login] L·ªói:", err);
            res.status(500).json({ message: err.message || "L·ªói server khi ƒëƒÉng nh·∫≠p!" });
        }
    }

    // L·∫•y t√™n Shipper
    static async getShipperName(req, res) {
        try {
            const shipperId = req.user.shipperId;
            if (!shipperId) {
                return res.status(400).json({ message: "Thi·∫øu shipperId trong token!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            res.status(200).json({ fullName: shipper.FullName });
        } catch (err) {
            console.error("[ShipperController.getShipperName] L·ªói:", err);
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y t√™n shipper!" });
        }
    }

    // L·∫•y th√¥ng tin shipper
    static async getProfile(req, res) {
        try {
            const shipperId = req.user?.shipperId;
            if (!shipperId) {
                return res.status(401).json({ message: "‚ùå Kh√¥ng t√¨m th·∫•y ShipperID trong token!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            console.log(`[ShipperController.getProfile] ƒê√£ l·∫•y th√¥ng tin shipper ShipperID: ${shipperId}`);
            res.status(200).json({
                fullName: shipper.FullName,
                birthDate: shipper.BirthDate,
                permanentAddress: shipper.PermanentAddress,
                currentAddress: shipper.CurrentAddress,
                phoneNumber: shipper.Phone,
                email: shipper.Email,
                cccd: shipper.CCCD,
                driverLicense: shipper.DriverLicense,
                status: shipper.Status,
                employeeId: shipper.EmployeeID,
            });
        } catch (err) {
            console.error("[ShipperController.getProfile] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server!" });
        }
    }

    // L·∫•y chi ti·∫øt ƒë∆°n h√†ng cho Shipper
    static async getOrderDetails(req, res) {
        try {
            const orderId = parseInt(req.params.orderId, 10);
            const shipperId = req.user.shipperId;

            if (isNaN(orderId)) {
                return res.status(400).json({ message: "M√£ ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá!" });
            }

            // L·∫•y chi ti·∫øt ƒë∆°n h√†ng
            const order = await Order.getOrderByIdForAdmin(orderId);
            if (!order) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!" });
            }

            // Ki·ªÉm tra xem shipper c√≥ ƒë∆∞·ª£c g√°n cho ƒë∆°n h√†ng n√†y kh√¥ng
            if (order.ShipperID !== shipperId) {
                return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y!" });
            }

            res.status(200).json(order);
        } catch (err) {
            console.error("[ShipperController.getOrderDetails] L·ªói:", err);
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng!" });
        }
    }

    // L·∫•y danh s√°ch shipper c·∫ßn duy·ªát (d√†nh cho admin)
    static async getPendingShippers(req, res) {
        try {
            const pendingShippers = await Shipper.getPendingShippers();
            console.log(`[ShipperController.getPendingShippers] ƒê√£ l·∫•y danh s√°ch shipper c·∫ßn duy·ªát: ${pendingShippers.length} shipper`);
            res.status(200).json(pendingShippers);
        } catch (err) {
            console.error("[ShipperController.getPendingShippers] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y danh s√°ch shipper c·∫ßn duy·ªát!" });
        }
    }

    // L·∫•y danh s√°ch shipper ƒë√£ duy·ªát (d√†nh cho admin)
    static async getApprovedShippers(req, res) {
        try {
            const approvedShippers = await Shipper.getApprovedShippers();
            console.log(`[ShipperController.getApprovedShippers] ƒê√£ l·∫•y danh s√°ch shipper ƒë√£ duy·ªát: ${approvedShippers.length} shipper`);
            res.status(200).json(approvedShippers);
        } catch (err) {
            console.error("[ShipperController.getApprovedShippers] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y danh s√°ch shipper ƒë√£ duy·ªát!" });
        }
    }

    // L·∫•y danh s√°ch shipper s·∫µn s√†ng (d√†nh cho admin)
    static async getAvailableShippers(req, res) {
        try {
            const availableShippers = await Shipper.getAvailableShippers();
            console.log(`[ShipperController.getAvailableShippers] ƒê√£ l·∫•y danh s√°ch shipper s·∫µn s√†ng: ${availableShippers.length} shipper`);
            res.status(200).json(availableShippers);
        } catch (err) {
            console.error("[ShipperController.getAvailableShippers] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y danh s√°ch shipper s·∫µn s√†ng!" });
        }
    }

    // L·∫•y chi ti·∫øt shipper theo ID (d√†nh cho admin)
    static async getShipperById(req, res) {
        try {
            const shipperId = parseInt(req.params.id, 10);
            if (isNaN(shipperId)) {
                return res.status(400).json({ message: "ShipperID kh√¥ng h·ª£p l·ªá!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            console.log(`[ShipperController.getShipperById] ƒê√£ l·∫•y chi ti·∫øt shipper ShipperID: ${shipperId}`);
            res.status(200).json({
                fullName: shipper.FullName,
                birthDate: shipper.BirthDate,
                permanentAddress: shipper.PermanentAddress,
                currentAddress: shipper.CurrentAddress,
                phoneNumber: shipper.Phone,
                email: shipper.Email,
                cccd: shipper.CCCD,
                driverLicense: shipper.DriverLicense,
                status: shipper.Status,
                employeeId: shipper.EmployeeID,
            });
        } catch (err) {
            console.error("[ShipperController.getShipperById] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server!" });
        }
    }

    // Duy·ªát shipper (d√†nh cho admin)
    static async approveShipper(req, res) {
        try {
            const shipperId = parseInt(req.params.id, 10);
            if (isNaN(shipperId)) {
                return res.status(400).json({ message: "ShipperID kh√¥ng h·ª£p l·ªá!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            if (shipper.Status !== "Pending") {
                return res.status(400).json({ message: "Shipper kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
            }

            await Shipper.approveShipper(shipperId);

            console.log(`[ShipperController.approveShipper] ƒê√£ duy·ªát shipper ShipperID: ${shipperId}`);
            res.status(200).json({ message: "Shipper ƒë√£ ƒë∆∞·ª£c duy·ªát v√† email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
        } catch (err) {
            console.error("[ShipperController.approveShipper] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi duy·ªát shipper!" });
        }
    }

    // T·ª´ ch·ªëi shipper (d√†nh cho admin)
    static async rejectShipper(req, res) {
        try {
            const shipperId = parseInt(req.params.id, 10);
            if (isNaN(shipperId)) {
                return res.status(400).json({ message: "ShipperID kh√¥ng h·ª£p l·ªá!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            if (shipper.Status !== "Pending") {
                return res.status(400).json({ message: "Shipper kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù duy·ªát!" });
            }

            await Shipper.rejectShipper(shipperId);
            console.log(`[ShipperController.rejectShipper] ƒê√£ t·ª´ ch·ªëi shipper ShipperID: ${shipperId}`);
            res.status(200).json({ message: "T·ª´ ch·ªëi shipper th√†nh c√¥ng!" });
        } catch (err) {
            console.error("[ShipperController.rejectShipper] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi t·ª´ ch·ªëi shipper!" });
        }
    }

    // X√≥a shipper (d√†nh cho admin)
    static async deleteShipper(req, res) {
        try {
            const shipperId = parseInt(req.params.id, 10);
            if (isNaN(shipperId)) {
                return res.status(400).json({ message: "ShipperID kh√¥ng h·ª£p l·ªá!" });
            }

            const shipper = await Shipper.getShipperById(shipperId);
            if (!shipper) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y shipper!" });
            }

            await Shipper.deleteShipper(shipperId);
            console.log(`[ShipperController.deleteShipper] ƒê√£ x√≥a shipper ShipperID: ${shipperId}`);
            res.status(200).json({ message: "X√≥a shipper th√†nh c√¥ng!" });
        } catch (err) {
            console.error("[ShipperController.deleteShipper] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi x√≥a shipper!" });
        }
    }

    // L·∫•y danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c g√°n
    static async getAssignments(req, res) {
        try {
            const shipperId = req.user.shipperId; // L·∫•y shipperId t·ª´ token
            const assignments = await Shipper.getAssignments(shipperId);
            console.log(`[ShipperController.getAssignments] ƒê√£ l·∫•y danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c g√°n cho ShipperID: ${shipperId}`);
            res.status(200).json(assignments);
        } catch (err) {
            console.error("[ShipperController.getAssignments] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng ƒë∆∞·ª£c g√°n!" });
        }
    }

    // L·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang v·∫≠n chuy·ªÉn
    static async getShippingOrders(req, res) {
        try {
            const shipperId = req.user.shipperId;
            const shippingOrders = await Shipper.getShippingOrders(shipperId);
            console.log(`[ShipperController.getShippingOrders] ƒê√£ l·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang v·∫≠n chuy·ªÉn cho ShipperID: ${shipperId}`);
            res.status(200).json(shippingOrders);
        } catch (err) {
            console.error("[ShipperController.getShippingOrders] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi l·∫•y danh s√°ch ƒë∆°n h√†ng ƒëang v·∫≠n chuy·ªÉn!" });
        }
    }

    // Ph·∫£n h·ªìi ƒë∆°n h√†ng (ƒê·ªìng √Ω/T·ª´ ch·ªëi)
    static async respondToAssignment(req, res) {
        try {
            const { assignmentId, shipperId, response } = req.body;
            if (!assignmentId || !shipperId || !response) {
                return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
            }
            if (response !== "Accepted" && response !== "Rejected") {
                return res.status(400).json({ message: "Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá!" });
            }

            // Ki·ªÉm tra shipperId t·ª´ token
            if (req.user.shipperId !== parseInt(shipperId)) {
                return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!" });
            }

            await Shipper.respondToAssignment(assignmentId, shipperId, response);
            console.log(`[ShipperController.respondToAssignment] ShipperID: ${shipperId} ƒë√£ ph·∫£n h·ªìi AssignmentID: ${assignmentId}`);
            res.status(200).json({ message: "Ph·∫£n h·ªìi ƒë∆°n h√†ng th√†nh c√¥ng!" });
        } catch (err) {
            console.error("[ShipperController.respondToAssignment] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi ph·∫£n h·ªìi ƒë∆°n h√†ng!" });
        }
    }

    // B·∫Øt ƒë·∫ßu v·∫≠n chuy·ªÉn ƒë∆°n h√†ng
    static async startShipping(req, res) {
        try {
            const { orderId, shipperId } = req.body;
            if (!orderId || !shipperId) {
                return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
            }

            // Ki·ªÉm tra shipperId t·ª´ token
            if (req.user.shipperId !== parseInt(shipperId)) {
                return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!" });
            }

            await Shipper.startShipping(orderId, shipperId);
            console.log(`[ShipperController.startShipping] ShipperID: ${shipperId} ƒë√£ b·∫Øt ƒë·∫ßu v·∫≠n chuy·ªÉn OrderID: ${orderId}`);
            res.status(200).json({ message: "B·∫Øt ƒë·∫ßu v·∫≠n chuy·ªÉn ƒë∆°n h√†ng th√†nh c√¥ng!" });
        } catch (err) {
            console.error("[ShipperController.startShipping] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi b·∫Øt ƒë·∫ßu v·∫≠n chuy·ªÉn ƒë∆°n h√†ng!" });
        }
    }

    // X√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng
    static async completeOrder(req, res) {
        try {
            const { orderId, shipperId } = req.body;
            if (!orderId || !shipperId) {
                return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
            }

            // Ki·ªÉm tra shipperId t·ª´ token
            if (req.user.shipperId !== parseInt(shipperId)) {
                return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!" });
            }

            await Shipper.completeOrder(orderId, shipperId);
            console.log(`[ShipperController.completeOrder] ShipperID: ${shipperId} ƒë√£ ho√†n th√†nh OrderID: ${orderId}`);
            res.status(200).json({ message: "X√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng th√†nh c√¥ng!" });
        } catch (err) {
            console.error("[ShipperController.completeOrder] L·ªói:", { message: err.message, stack: err.stack });
            res.status(500).json({ message: err.message || "L·ªói server khi x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng!" });
        }
    }
}

module.exports = ShipperController;